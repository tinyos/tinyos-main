/*
 * Copyright (c) 2014, Technische Universitaet Berlin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * - Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 * - Neither the name of the Technische Universitaet Berlin nor the names
 *   of its contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @author Moksha Birk <birk@tkn.tu-berlin.de>
 */

#include "plain154_phy.h"
#include "plain154_types.h"
#include "plain154_security.h"

/**
 * MCPS-DATA
 */

interface TknTschMcpsData
{

  /**
   * The MCPS-DATA.request primitive requests the transfer of data to another
   * device.
   *
   * @param TODO describe parameters
   * @return       PLAIN154_SUCCESS if the request succeeded and a confirm event
   *               will be signalled, an appropriate error code otherwise
   *               (no confirm event will be signalled in this case)
   */
  command plain154_status_t request(
    uint8_t SrcAddrMode,
    uint8_t DstAddrMode,
    uint16_t DstPANId,
    plain154_address_t *DstAddr,
    message_t* msg,
    uint8_t msduHandle,
    uint8_t AckTX,
    uint8_t SecurityLevel,
    uint8_t KeyIdMode,
    plain154_sec_keysource_t KeySource,
    uint8_t KeyIndex
  );

  /**
   * The MCPS-DATA.confirm primitive reports the results of a request to
   * transfer data to another device.
   *
   * @param msduHandle The handle associated with the MSDU being confirmed.
   * @param status The status of the MCPS-DATA.request
   */
  event void confirm(
    uint8_t msduHandle,
    plain154_status_t status
  );

  /**
   * The MCPS-DATA.indication primitive is generated by the MAC sublayer
   * and issued to the next higher layer on receipt of a data frame at
   * the local MAC sublayer entity that passes the appropriate message
   * filtering operations.
   *
   * @param msduHandle The handle associated with the MSDU being confirmed.
   * @param status The status of the MCPS-DATA.request
   */

  // adapt to tinyos conventions (pass pointer to message_t...)

  event void indication(
    message_t* msg,
    uint8_t mpduLinkQuality,
    uint8_t SecurityLevel,
    uint8_t KeyIdMode,
    plain154_sec_keysource_t KeySource,
    uint8_t KeyIndex
/*
    uint8_t SrcAddrMode,
    uint16_t SrcPANId,
    plain154_address_t SrcAddr,
    uint8_t DstAddrMode,
    uint16_t DstPANId,
    plain154_address_t DstAddr,
    uint8_t msduLength,
    void* msdu,
    uint8_t mpduLinkQuality,
    uint8_t DSN,
    uint8_t SecurityLevel,
    uint8_t KeyIdMode,
    plain154_sec_keysource_t KeySource,
    uint8_t KeyIndex
*/
  );
}
